"""
restricciones_construccion.py
=============================
Implementaci√≥n completa de las restricciones de CONSTRUCCI√ìN DESDE CERO 
seg√∫n Secci√≥n 7 del PDF.

Grupo 5 - Capstone 2025
Modelo Matem√°tico: Restricciones de Construcci√≥n
"""

import gurobipy as gp
from gurobipy import GRB
from config import AREA_MINIMA, MAX_PISOS, OCUPACION_MAX_TERRENO

# ============================================================================
# RESTRICCIONES DE CONSTRUCCI√ìN (Secci√≥n 7 del PDF)
# ============================================================================

def agregar_restricciones_construccion(modelo, variables, terreno_params):
    """
    Agrega TODAS las restricciones de construcci√≥n desde cero (Secci√≥n 7 del PDF).
    
    Args:
        modelo: Modelo de Gurobi
        variables: Dict con todas las variables del modelo
        terreno_params: Dict con par√°metros del terreno (LotArea, etc.)
        
    Returns:
        None (modifica el modelo directamente)
    """
    
    print("\n" + "="*70)
    print("AGREGANDO RESTRICCIONES DE CONSTRUCCI√ìN (Secci√≥n 7 del PDF)")
    print("="*70)
    
    # Extraer variables necesarias
    x = variables  # Asumimos que variables es un dict con todas las vars
    
    LotArea = terreno_params.get('LotArea', 10000)  # √Årea del terreno
    
    # ========================================================================
    # RESTRICCI√ìN 1 (PDF): √Årea construida no puede superar terreno
    # ========================================================================
    """
    PDF dice:
    1stFlrSF_new + TotalPorch_new + PoolArea_new ‚â§ LotArea
    
    Adem√°s agregamos restricci√≥n de ocupaci√≥n m√°xima (70% del terreno)
    """
    
    print("\n1Ô∏è‚É£  Restricci√≥n: √Årea construida ‚â§ Terreno")
    
    # Calcular TotalPorch
    total_porch = (
        x.get('WoodDeckSF', 0) +
        x.get('OpenPorchSF', 0) +
        x.get('EnclosedPorch', 0) +
        x.get('ScreenPorch', 0) +
        x.get('3SsnPorch', 0)
    )
    
    # Restricci√≥n b√°sica: No exceder terreno
    modelo.addConstr(
        x['1stFlrSF'] + total_porch + x.get('PoolArea', 0) <= LotArea,
        name='area_no_excede_terreno'
    )
    
    # Restricci√≥n de ocupaci√≥n m√°xima
    modelo.addConstr(
        x['1stFlrSF'] + total_porch + x.get('PoolArea', 0) <= OCUPACION_MAX_TERRENO * LotArea,
        name='ocupacion_maxima_70pct'
    )
    
    print(f"   ‚úì LotArea: {LotArea} sqft")
    print(f"   ‚úì Ocupaci√≥n m√°xima permitida: {OCUPACION_MAX_TERRENO*100}% = {OCUPACION_MAX_TERRENO*LotArea:,.0f} sqft")
    
    # ========================================================================
    # RESTRICCI√ìN 2 (PDF): M√°ximo n√∫mero de pisos
    # ========================================================================
    """
    PDF dice:
    Solo se puede agregar un n√∫mero limitado de pisos (m√°ximo 2 pisos)
    """
    
    print("\n2Ô∏è‚É£  Restricci√≥n: M√°ximo 2 pisos")
    
    # Variable binaria: ¬øTiene segundo piso?
    tiene_2do_piso = modelo.addVar(vtype=GRB.BINARY, name='tiene_2do_piso')
    
    # Si 2ndFlrSF > 0 ‚Üí tiene_2do_piso = 1
    M = 10000  # Big-M
    modelo.addConstr(x['2ndFlrSF'] <= M * tiene_2do_piso, name='activar_2do_piso')
    
    # M√°ximo MAX_PISOS pisos (ya tenemos 1er piso siempre, solo 1 adicional)
    modelo.addConstr(tiene_2do_piso <= 1, name='max_2_pisos')
    
    print(f"   ‚úì M√°ximo {MAX_PISOS} pisos permitidos")
    
    # ========================================================================
    # RESTRICCI√ìN 3 (PDF): Half-Bath solo si hay Full-Bath
    # ========================================================================
    """
    PDF dice:
    HalfBath_new ‚â§ FullBath_new
    
    Las half-bath solo pueden existir si hay al menos un ba√±o completo
    """
    
    print("\n3Ô∏è‚É£  Restricci√≥n: HalfBath ‚â§ FullBath")
    
    modelo.addConstr(
        x.get('HalfBath', 0) <= x['FullBath'],
        name='halfbath_requiere_fullbath'
    )
    
    print(f"   ‚úì Medios ba√±os limitados por ba√±os completos")
    
    # ========================================================================
    # RESTRICCI√ìN 4 (PDF): Habitaciones proporcionales a superficie
    # ========================================================================
    """
    PDF dice:
    El n√∫mero de habitaciones no puede ser mayor que el permitido por superficie
    
    Interpretaci√≥n: Cada habitaci√≥n necesita un √°rea m√≠nima
    """
    
    print("\n4Ô∏è‚É£  Restricci√≥n: Habitaciones proporcionales a √°rea")
    
    # Cada dormitorio necesita al menos AREA_MINIMA['Bedroom'] sqft
    modelo.addConstr(
        x['BedroomAbvGr'] * AREA_MINIMA['Bedroom'] <= x['GrLivArea'],
        name='area_minima_dormitorios'
    )
    
    # Cada ba√±o completo necesita al menos AREA_MINIMA['FullBath'] sqft
    modelo.addConstr(
        x['FullBath'] * AREA_MINIMA['FullBath'] <= x['GrLivArea'],
        name='area_minima_banos'
    )
    
    # Cocina necesita √°rea m√≠nima
    modelo.addConstr(
        x['KitchenAbvGr'] * AREA_MINIMA['Kitchen'] <= x['GrLivArea'],
        name='area_minima_cocina'
    )
    
    print(f"   ‚úì √Årea m√≠nima por dormitorio: {AREA_MINIMA['Bedroom']} sqft")
    print(f"   ‚úì √Årea m√≠nima por ba√±o: {AREA_MINIMA['FullBath']} sqft")
    print(f"   ‚úì √Årea m√≠nima cocina: {AREA_MINIMA['Kitchen']} sqft")
    
    # ========================================================================
    # RESTRICCI√ìN 6 (PDF): √Årea m√≠nima razonable por tipo de ambiente
    # ========================================================================
    """
    PDF dice:
    Cada tipo de ambiente debe tener un √°rea m√≠nima razonable
    
    Esto se relaciona con √°rea m√≠nima de cocina b√°sica vs top
    """
    
    print("\n6Ô∏è‚É£  Restricci√≥n: √Åreas m√≠nimas por ambiente")
    
    # √Årea habitable m√≠nima total
    modelo.addConstr(x['GrLivArea'] >= 600, name='area_habitable_minima')
    
    # Si hay garaje, debe tener al menos √°rea m√≠nima por auto
    area_minima_por_auto = 200  # sqft por auto
    modelo.addConstr(
        x['GarageCars'] * area_minima_por_auto <= x.get('GarageArea', 0) + 10000 * (1 - tiene_garaje),
        name='area_minima_garaje'
    ) if 'GarageCars' in x else None
    
    print(f"   ‚úì √Årea habitable m√≠nima: 600 sqft")
    print(f"   ‚úì √Årea m√≠nima garaje: {area_minima_por_auto} sqft/auto")
    
    # ========================================================================
    # RESTRICCI√ìN 7 (PDF): M√°ximo de ambientes repetidos
    # ========================================================================
    """
    PDF dice:
    M√°ximo de ambientes repetidos (m√°ximo n√∫mero de cocinas, comedores, etc.)
    """
    
    print("\n7Ô∏è‚É£  Restricci√≥n: M√°ximo de ambientes repetidos")
    
    # M√°ximo 2 cocinas (principal + auxiliar/isla)
    modelo.addConstr(x['KitchenAbvGr'] <= 2, name='max_2_cocinas')
    
    # M√°ximo 6 dormitorios (razonable para casa residencial)
    modelo.addConstr(x['BedroomAbvGr'] <= 6, name='max_6_dormitorios')
    
    # M√°ximo 4 ba√±os completos
    modelo.addConstr(x['FullBath'] <= 4, name='max_4_banos_completos')
    
    # M√°ximo 2 medios ba√±os
    modelo.addConstr(x.get('HalfBath', 0) <= 2, name='max_2_medios_banos')
    
    # M√°ximo 3 chimeneas
    modelo.addConstr(x.get('Fireplaces', 0) <= 3, name='max_3_chimeneas')
    
    print(f"   ‚úì M√°ximo 2 cocinas, 6 dormitorios, 4 ba√±os completos")
    
    # ========================================================================
    # RESTRICCI√ìN 8 (PDF): M√≠nimo de √°rea para ampliaci√≥n
    # ========================================================================
    """
    PDF dice:
    Definir m√≠nimo de √°rea que tiene una ampliaci√≥n (no puede haber ampliaci√≥n de 1m)
    """
    
    print("\n8Ô∏è‚É£  Restricci√≥n: √Årea m√≠nima de ampliaci√≥n")
    
    # Si hay segundo piso, debe tener al menos 200 sqft
    modelo.addConstr(
        x['2ndFlrSF'] >= 200 * tiene_2do_piso,
        name='area_minima_2do_piso'
    )
    
    # Si hay segundo piso, no puede exceder primer piso (restricci√≥n estructural)
    modelo.addConstr(
        x['2ndFlrSF'] <= x['1stFlrSF'],
        name='2do_piso_max_igual_1ro'
    )
    
    print(f"   ‚úì Si hay 2do piso, m√≠nimo 200 sqft")
    print(f"   ‚úì 2do piso ‚â§ 1er piso (estructural)")
    
    # ========================================================================
    # RESTRICCI√ìN 9 (PDF): Solo construir ambiente si hay superficie
    # ========================================================================
    """
    PDF dice:
    Solo se puede construir un nuevo ambiente si se ampl√≠a la superficie construida
    
    Interpretaci√≥n: Si agregas habitaciones, el √°rea total debe aumentar
    """
    
    print("\n9Ô∏è‚É£  Restricci√≥n: Nuevos ambientes requieren √°rea adicional")
    
    # Total de habitaciones debe ser consistente con √°rea
    # TotRmsAbvGrd = Bedroom + Kitchen + Otras
    # Cada habitaci√≥n promedio necesita ~100 sqft
    modelo.addConstr(
        x['TotRmsAbvGrd'] * 100 <= x['GrLivArea'] + 1000,  # +1000 de tolerancia
        name='habitaciones_consistentes_con_area'
    )
    
    print(f"   ‚úì Total habitaciones consistente con √°rea habitable")
    
    # ========================================================================
    # RESTRICCI√ìN 10 (PDF): Al agregar ambiente, aumentar √°rea m√≠nima
    # ========================================================================
    """
    PDF dice:
    Si se agrega cualquier ambiente nuevo, el √°rea total debe aumentar al menos 
    en el √°rea m√≠nima de ese ambiente
    
    Esto es impl√≠cito en las restricciones de √°rea m√≠nima anteriores
    """
    
    print("\nüîü Restricci√≥n: √Årea total aumenta con nuevos ambientes")
    
    # Ya cubierto por restricciones 4 y 6
    # Cada nuevo dormitorio ‚Üí +80 sqft m√≠nimo
    # Cada nuevo ba√±o ‚Üí +50 sqft m√≠nimo
    # etc.
    
    print(f"   ‚úì Impl√≠cito en restricciones de √°rea m√≠nima")
    
    # ========================================================================
    # RESTRICCI√ìN ADICIONAL: Consistencia de GrLivArea
    # ========================================================================
    """
    Del PDF Secci√≥n 5:
    GrLivArea = 1stFlrSF + 2ndFlrSF + LowQualFinSF
    """
    
    print("\n‚ûï Restricci√≥n adicional: Consistencia de GrLivArea")
    
    low_qual = x.get('LowQualFinSF', 0)
    
    modelo.addConstr(
        x['GrLivArea'] == x['1stFlrSF'] + x['2ndFlrSF'] + low_qual,
        name='grlivarea_consistencia'
    )
    
    print(f"   ‚úì GrLivArea = 1stFlr + 2ndFlr + LowQual")
    
    # ========================================================================
    # RESTRICCI√ìN ADICIONAL: S√≥tano no excede primer piso
    # ========================================================================
    """
    Del PDF Secci√≥n 5:
    1stFlrSF ‚â• TotalBsmtSF
    """
    
    print("\n‚ûï Restricci√≥n adicional: S√≥tano ‚â§ Primer piso")
    
    if 'TotalBsmtSF' in x:
        modelo.addConstr(
            x['TotalBsmtSF'] <= x['1stFlrSF'],
            name='sotano_max_igual_1ro'
        )
        print(f"   ‚úì TotalBsmtSF ‚â§ 1stFlrSF")
    
    # ========================================================================
    # RESTRICCI√ìN ADICIONAL: M√≠nimos b√°sicos
    # ========================================================================
    """
    Del PDF Secci√≥n 5:
    FullBath ‚â• 1, Bedroom ‚â• 1, Kitchen ‚â• 1
    """
    
    print("\n‚ûï Restricci√≥n adicional: M√≠nimos b√°sicos habitabilidad")
    
    modelo.addConstr(x['FullBath'] >= 1, name='minimo_1_bano')
    modelo.addConstr(x['BedroomAbvGr'] >= 1, name='minimo_1_dormitorio')
    modelo.addConstr(x['KitchenAbvGr'] >= 1, name='minimo_1_cocina')
    
    print(f"   ‚úì M√≠nimo: 1 ba√±o, 1 dormitorio, 1 cocina")
    
    # ========================================================================
    # RESTRICCI√ìN ADICIONAL: TotRmsAbvGrd consistencia
    # ========================================================================
    """
    Del PDF Secci√≥n 5:
    TotRmsAbvGrd = Bedroom + Kitchen + OtrasHabitaciones
    """
    
    print("\n‚ûï Restricci√≥n adicional: Total habitaciones")
    
    # TotRmsAbvGrd debe incluir al menos dormitorios + cocinas
    modelo.addConstr(
        x['TotRmsAbvGrd'] >= x['BedroomAbvGr'] + x['KitchenAbvGr'],
        name='totrooms_minimo'
    )
    
    # M√°ximo razonable de habitaciones totales
    modelo.addConstr(
        x['TotRmsAbvGrd'] <= 15,
        name='totrooms_maximo'
    )
    
    print(f"   ‚úì TotRms ‚â• Bedrooms + Kitchens")
    print(f"   ‚úì TotRms ‚â§ 15 (m√°ximo razonable)")
    
    print("\n" + "="*70)
    print("‚úÖ TODAS LAS RESTRICCIONES DE CONSTRUCCI√ìN AGREGADAS")
    print("="*70)


# ============================================================================
# FUNCI√ìN AUXILIAR: Variable binaria condicional para garaje
# ============================================================================

def agregar_variable_garaje_condicional(modelo, variables):
    """
    Crea variable binaria que indica si hay garaje.
    
    Args:
        modelo: Modelo de Gurobi
        variables: Dict con variables del modelo
        
    Returns:
        Variable binaria tiene_garaje
    """
    tiene_garaje = modelo.addVar(vtype=GRB.BINARY, name='tiene_garaje')
    
    # Si GarageCars > 0 ‚Üí tiene_garaje = 1
    M = 10
    if 'GarageCars' in variables:
        modelo.addConstr(
            variables['GarageCars'] <= M * tiene_garaje,
            name='activar_garaje'
        )
    
    return tiene_garaje


# ============================================================================
# FUNCI√ìN: Agregar restricciones de calidad para construcci√≥n nueva
# ============================================================================

def fijar_calidades_construccion_nueva(modelo, variables, calidades_default):
    """
    Fija calidades a valores excelentes para construcci√≥n nueva.
    
    Seg√∫n PDF Secci√≥n 2:
    "Cuando se construye desde cero, la calidad ser√° excelente"
    
    Args:
        modelo: Modelo de Gurobi
        variables: Dict con variables del modelo
        calidades_default: Dict con valores por defecto (de config.py)
    """
    
    print("\n" + "="*70)
    print("FIJANDO CALIDADES PARA CONSTRUCCI√ìN NUEVA (Secci√≥n 2 del PDF)")
    print("="*70)
    
    for var_name, valor_excelente in calidades_default.items():
        if var_name in variables:
            modelo.addConstr(
                variables[var_name] == valor_excelente,
                name=f'calidad_{var_name}_excelente'
            )
            print(f"  ‚úì {var_name} = {valor_excelente} (Excelente)")
    
    print("="*70)


# ============================================================================
# FUNCI√ìN COMPLETA: Setup modelo de construcci√≥n
# ============================================================================

def setup_modelo_construccion_completo(terreno_params, calidades_default):
    """
    Crea y configura un modelo COMPLETO de construcci√≥n desde cero.
    
    Args:
        terreno_params: Dict con par√°metros del terreno (LotArea, etc.)
        calidades_default: Dict con calidades por defecto (de config.py)
        
    Returns:
        tuple: (modelo, variables_dict)
    """
    
    modelo = gp.Model("Construccion_Desde_Cero")
    modelo.Params.LogToConsole = 0
    modelo.Params.NonConvex = 2
    
    print("\n" + "="*70)
    print("CREANDO MODELO DE CONSTRUCCI√ìN DESDE CERO")
    print("="*70)
    
    # ========== CREAR VARIABLES ==========
    
    from config import ATRIBUTOS_ACCIONABLES
    
    variables = {}
    
    print("\nüìã Creando variables de decisi√≥n...")
    
    for attr, (costo, es_discreta, min_val, max_val, desc) in ATRIBUTOS_ACCIONABLES.items():
        if es_discreta:
            variables[attr] = modelo.addVar(
                lb=min_val, ub=max_val, 
                vtype=GRB.INTEGER, 
                name=attr
            )
        else:
            variables[attr] = modelo.addVar(
                lb=min_val, ub=max_val, 
                vtype=GRB.CONTINUOUS, 
                name=attr
            )
    
    print(f"  ‚úì {len(variables)} variables creadas")
    
    # ========== AGREGAR RESTRICCIONES ==========
    
    # 1. Restricciones de construcci√≥n (Secci√≥n 7)
    agregar_restricciones_construccion(modelo, variables, terreno_params)
    
    # 2. Fijar calidades a excelente (Secci√≥n 2)
    fijar_calidades_construccion_nueva(modelo, variables, calidades_default)
    
    # 3. Variable auxiliar para garaje
    tiene_garaje = agregar_variable_garaje_condicional(modelo, variables)
    variables['tiene_garaje'] = tiene_garaje
    
    print("\n‚úÖ Modelo de construcci√≥n configurado completamente")
    
    return modelo, variables


# ============================================================================
# EJEMPLO DE USO
# ============================================================================

if __name__ == "__main__":
    from config import CALIDADES_CONSTRUCCION_NUEVA, ATRIBUTOS_ACCIONABLES
    
    # Par√°metros del terreno (dados)
    terreno = {
        'LotArea': 10000,      # 10,000 sqft de terreno
        'LotFrontage': 80,     # 80 pies de frente
        'Neighborhood': 'CollgCr',
        'LotShape': 'Reg',     # Regular
    }
    
    print("\nüèóÔ∏è  TERRENO DISPONIBLE:")
    for k, v in terreno.items():
        print(f"  {k}: {v}")
    
    # Crear modelo completo
    modelo, variables = setup_modelo_construccion_completo(
        terreno_params=terreno,
        calidades_default=CALIDADES_CONSTRUCCION_NUEVA
    )
    
    # ========== DEFINIR FUNCI√ìN OBJETIVO ==========
    # Minimizar costo de construcci√≥n (ejemplo simple)
    
    costo_total = 0
    for attr, var in variables.items():
        if attr in ATRIBUTOS_ACCIONABLES:
            costo_unitario = ATRIBUTOS_ACCIONABLES[attr][0]
            costo_total += var * costo_unitario
    
    modelo.setObjective(costo_total, GRB.MINIMIZE)
    
    print("\nüéØ Objetivo: Minimizar costo de construcci√≥n")
    
    # Resolver
    print("\n‚öôÔ∏è  Resolviendo modelo...")
    modelo.optimize()
    
    if modelo.status == GRB.OPTIMAL:
        print("\n" + "="*70)
        print("‚úÖ SOLUCI√ìN √ìPTIMA ENCONTRADA")
        print("="*70)
        print(f"\nCosto total de construcci√≥n: ${modelo.ObjVal:,.0f}")
        
        print("\nüè† CARACTER√çSTICAS DE LA CASA √ìPTIMA:")
        for attr, var in sorted(variables.items()):
            if attr in ATRIBUTOS_ACCIONABLES and var.X > 0.01:
                print(f"  {attr:<20} = {var.X:>10.1f}")
    else:
        print(f"\n‚ùå No se encontr√≥ soluci√≥n √≥ptima. Status: {modelo.status}")

print("\n‚úÖ Archivo restricciones_construccion.py creado")